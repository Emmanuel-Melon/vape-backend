generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  username     String            @unique
  password     String?
  role         UserRole          @default(USER)
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  quizAttempts UserQuizAttempt[]

  @@map("users")
}

enum SessionType {
  SOLO
  GROUP
}

enum HeatingStyle {
  ON_DEMAND
  SESSION
}

model Vaporizer {
  id            Int            @id @default(autoincrement())
  name          String
  manufacturer  String?
  msrp          Decimal?
  releaseDate   DateTime?      @map("release_date") @db.Date
  heatingMethod HeatingMethod? @map("heating_method")
  tempControl   TempControl?   @map("temp_control")
  expertScore   Decimal?       @map("expert_score") @db.Decimal(3, 1)
  userRating    Decimal?       @map("user_rating") @db.Decimal(2, 1)
  bestFor       String[]       @map("best_for")
  slug          String         @unique

  // Vibe and preference scores
  moods             String[]   @default([])
  contexts          String[]   @default([])
  scenarios         String[]   @default([])
  portabilityScore  Decimal?   @map("portability_score") @db.Decimal(3, 1)
  easeOfUseScore    Decimal?   @map("ease_of_use_score") @db.Decimal(3, 1)
  discreetnessScore Decimal?   @map("discreetness_score") @db.Decimal(3, 1)

  // Relation to Annotations
  annotations Annotation[]

  @@map("vaporizers")
}

model Quiz {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  questions   Question[]
  attempts    UserQuizAttempt[]

  @@map("quizzes")
}

model Question {
  id           Int              @id @default(autoincrement())
  quizId       Int
  text         String
  subtitle     String?
  type         QuestionType
  order        Int
  maxRank      Int?
  rangeMin     Float?
  rangeMax     Float?
  rangeStep    Float?
  rangeDefault Float?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  options      QuestionOption[]
  quiz         Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      UserAnswer[]

  @@unique([quizId, order])
  @@map("questions")
}

model QuestionOption {
  id          Int          @id @default(autoincrement())
  questionId  Int
  label       String
  value       String
  description String?
  order       Int?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[] @relation("SingleSelectedOption")

  @@unique([questionId, value])
  @@map("question_options")
}

model UserQuizAttempt {
  id             Int          @id @default(autoincrement())
  userId         String
  quizId         Int
  startedAt      DateTime     @default(now()) @map("started_at")
  completedAt    DateTime?    @map("completed_at")
  rawAnswersJson Json?        @map("raw_answers_json")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  answers        UserAnswer[]
  quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_quiz_attempts")
}

model UserAnswer {
  id                   Int             @id @default(autoincrement())
  userQuizAttemptId    Int
  questionId           Int
  selectedOptionId     Int?
  selectedOptionValues String[]        @map("selected_option_values")
  rankedAnswersJson    Json?           @map("ranked_answers_json")
  rangeValue           Float?
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  question             Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption       QuestionOption? @relation("SingleSelectedOption", fields: [selectedOptionId], references: [id], onDelete: Restrict)
  userQuizAttempt      UserQuizAttempt @relation(fields: [userQuizAttemptId], references: [id], onDelete: Cascade)

  @@unique([userQuizAttemptId, questionId])
  @@map("user_answers")
}

enum UserRole {
  USER
  ADMIN
}

enum HeatingMethod {
  HYBRID
  CONVECTION
  CONDUCTION
}

enum TempControl {
  DIGITAL
  ANALOG
  APP
  PRESET
}

enum QuestionType {
  WELCOME
  SINGLE_SELECT
  MULTI_SELECT
  RANKED_SELECT
  RANGE_SLIDER
}

enum AnnotationType {
  PRO
  CON
  TIP
  NOTE
}

model Annotation {
  id          Int            @id @default(autoincrement())
  vaporizerId Int
  type        AnnotationType
  text        String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  vaporizer   Vaporizer      @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@map("annotations")
}
