generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  email        String            @unique
  username     String            @unique
  password     String?
  role         UserRole          @default(USER)
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")
  quizAttempts UserQuizAttempt[]

  @@map("users")
}

enum SessionType {
  SOLO
  GROUP
}

enum HeatingStyle {
  ON_DEMAND
  SESSION
}

model Vaporizer {
  id            Int            @id @default(autoincrement())
  name          String
  manufacturer  String?
  msrp          Decimal?       @db.Decimal(10, 2)
  releaseDate   DateTime?      @map("release_date") @db.Date
  heatingMethod HeatingMethod? @map("heating_method")
  tempControl   TempControl?   @map("temp_control")
  expertScore   Decimal?       @map("expert_score") @db.Decimal(3, 1)
  userRating    Decimal?       @map("user_rating") @db.Decimal(2, 1)
  slug          String         @unique
  category      String?
  subCategory   String?        @map("sub_category")
  powerSource   String?        @map("power_source")
  bowlSizeGrams String?        @map("bowl_size_grams")
  heatUpTimeSeconds String?    @map("heat_up_time_seconds")
  
  // Summary fields
  vaporQualitySummary  String? @map("vapor_quality_summary") @db.Text
  efficiencySummary    String? @map("efficiency_summary") @db.Text
  easeOfUseSummary     String? @map("ease_of_use_summary") @db.Text
  maintenanceSummary   String? @map("maintenance_summary") @db.Text
  communityFeedback    String? @map("community_feedback") @db.Text
  enthusiastRating     Int?
  
  // Price information
  regularPrice  Decimal? @map("regular_price") @db.Decimal(10, 2)
  salePrice     Decimal? @map("sale_price") @db.Decimal(10, 2)
  currentPrice  Decimal? @map("current_price") @db.Decimal(10, 2)

  // Vibe and preference scores
  portabilityScore  Decimal?   @map("portability_score") @db.Decimal(3, 1)
  easeOfUseScore    Decimal?   @map("ease_of_use_score") @db.Decimal(3, 1)
  discreetnessScore Decimal?   @map("discreetness_score") @db.Decimal(3, 1)

  // Relations to controlled vocabularies
  moods           MoodToVaporizer[]
  contexts        ContextToVaporizer[]
  scenarios       ScenarioToVaporizer[]
  bestFor         BestForToVaporizer[]
  deliveryMethods DeliveryMethodToVaporizer[]
  tags            TagToVaporizer[]
  
  // Relations to other models
  accessories     Accessory[]
  comparisons     Comparison[]
  ballVapeDetails BallVapeDetails?
  
  // Relation to Annotations
  annotations     Annotation[]

  @@map("vaporizers")
}

model Quiz {
  id          Int               @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  questions   Question[]
  attempts    UserQuizAttempt[]

  @@map("quizzes")
}

model Question {
  id           Int              @id @default(autoincrement())
  quizId       Int
  text         String
  subtitle     String?
  type         QuestionType
  order        Int
  maxRank      Int?
  rangeMin     Float?
  rangeMax     Float?
  rangeStep    Float?
  rangeDefault Float?
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  options      QuestionOption[]
  quiz         Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers      UserAnswer[]

  @@unique([quizId, order])
  @@map("questions")
}

model QuestionOption {
  id          Int          @id @default(autoincrement())
  questionId  Int
  label       String
  value       String
  description String?
  order       Int?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[] @relation("SingleSelectedOption")

  @@unique([questionId, value])
  @@map("question_options")
}

model UserQuizAttempt {
  id             Int          @id @default(autoincrement())
  userId         String
  quizId         Int
  startedAt      DateTime     @default(now()) @map("started_at")
  completedAt    DateTime?    @map("completed_at")
  rawAnswersJson Json?        @map("raw_answers_json")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  answers        UserAnswer[]
  quiz           Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_quiz_attempts")
}

model UserAnswer {
  id                   Int             @id @default(autoincrement())
  userQuizAttemptId    Int
  questionId           Int
  selectedOptionId     Int?
  selectedOptionValues String[]        @map("selected_option_values")
  rankedAnswersJson    Json?           @map("ranked_answers_json")
  rangeValue           Float?
  createdAt            DateTime        @default(now()) @map("created_at")
  updatedAt            DateTime        @updatedAt @map("updated_at")
  question             Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption       QuestionOption? @relation("SingleSelectedOption", fields: [selectedOptionId], references: [id], onDelete: Restrict)
  userQuizAttempt      UserQuizAttempt @relation(fields: [userQuizAttemptId], references: [id], onDelete: Cascade)

  @@unique([userQuizAttemptId, questionId])
  @@map("user_answers")
}

enum UserRole {
  USER
  ADMIN
}

enum HeatingMethod {
  HYBRID
  CONVECTION
  CONDUCTION
}

enum TempControl {
  DIGITAL
  ANALOG
  APP
  PRESET
}

enum QuestionType {
  WELCOME
  SINGLE_SELECT
  MULTI_SELECT
  RANKED_SELECT
  RANGE_SLIDER
}

enum AnnotationType {
  PRO
  CON
  TIP
  NOTE
  FEATURE
}

model Annotation {
  id          Int            @id @default(autoincrement())
  vaporizerId Int
  type        AnnotationType
  text        String
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  vaporizer   Vaporizer      @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@map("annotations")
}

// Controlled vocabulary models
model Mood {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  vaporizers  MoodToVaporizer[]

  @@map("moods")
}

model Context {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String?
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  vaporizers  ContextToVaporizer[]

  @@map("contexts")
}

model Scenario {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now()) @map("created_at")
  updatedAt   DateTime             @updatedAt @map("updated_at")
  vaporizers  ScenarioToVaporizer[]

  @@map("scenarios")
}

model BestFor {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  description String?
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @updatedAt @map("updated_at")
  vaporizers  BestForToVaporizer[]

  @@map("best_for_tags")
}

// Delivery methods model
model DeliveryMethod {
  id          Int                       @id @default(autoincrement())
  name        String                    @unique
  description String?
  createdAt   DateTime                  @default(now()) @map("created_at")
  updatedAt   DateTime                  @updatedAt @map("updated_at")
  vaporizers  DeliveryMethodToVaporizer[]

  @@map("delivery_methods")
}

// Accessory models
model Accessory {
  id          Int                @id @default(autoincrement())
  name        String
  isOfficial  Boolean            @default(true) @map("is_official")
  vaporizerId Int
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  vaporizer   Vaporizer          @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@map("accessories")
}

// Comparison model
model Comparison {
  id             Int       @id @default(autoincrement())
  vaporizerId    Int
  comparedToName String    @map("compared_to_name")
  summary        String    @db.Text
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  vaporizer      Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@map("comparisons")
}

// Ball vape details model
model BallVapeDetails {
  id                Int       @id @default(autoincrement())
  vaporizerId       Int       @unique
  ballMaterial      String?   @map("ball_material")
  ballSizeMm        Float?    @map("ball_size_mm")
  ballCount         Int?
  coilSizeMm        Float?    @map("coil_size_mm")
  recommendedTempF  Float?    @map("recommended_temp_f")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  vaporizer         Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@map("ball_vape_details")
}

// Junction tables for many-to-many relationships
model MoodToVaporizer {
  moodId      Int
  vaporizerId Int
  mood        Mood      @relation(fields: [moodId], references: [id], onDelete: Cascade)
  vaporizer   Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([moodId, vaporizerId])
  @@map("mood_to_vaporizer")
}

model ContextToVaporizer {
  contextId   Int
  vaporizerId Int
  context     Context   @relation(fields: [contextId], references: [id], onDelete: Cascade)
  vaporizer   Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([contextId, vaporizerId])
  @@map("context_to_vaporizer")
}

model ScenarioToVaporizer {
  scenarioId  Int
  vaporizerId Int
  scenario    Scenario  @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
  vaporizer   Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([scenarioId, vaporizerId])
  @@map("scenario_to_vaporizer")
}

model BestForToVaporizer {
  bestForId   Int
  vaporizerId Int
  bestFor     BestFor   @relation(fields: [bestForId], references: [id], onDelete: Cascade)
  vaporizer   Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([bestForId, vaporizerId])
  @@map("best_for_to_vaporizer")
}

model DeliveryMethodToVaporizer {
  deliveryMethodId Int
  vaporizerId      Int
  deliveryMethod   DeliveryMethod @relation(fields: [deliveryMethodId], references: [id], onDelete: Cascade)
  vaporizer        Vaporizer      @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([deliveryMethodId, vaporizerId])
  @@map("delivery_method_to_vaporizer")
}

// Tag models for additional categorization
model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  category    TagCategory
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  vaporizers  TagToVaporizer[]

  @@map("tags")
}

model TagToVaporizer {
  tagId       Int
  vaporizerId Int
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  vaporizer   Vaporizer @relation(fields: [vaporizerId], references: [id], onDelete: Cascade)

  @@id([tagId, vaporizerId])
  @@map("tag_to_vaporizer")
}

enum TagCategory {
  HEATING
  POWER
  DELIVERY
  FEATURES
  MATERIALS
  TYPE
}
